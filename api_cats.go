/*
Cat as a service (CATAAS)

Cat as a service (CATAAS) is a REST API to spread peace and love (or not) thanks to cats.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cataas

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// CatsAPIService CatsAPI service
type CatsAPIService service

type ApiCatGetRequest struct {
	ctx        context.Context
	ApiService *CatsAPIService
	id         string
	type_      *string
	filter     *string
	fit        *string
	position   *string
	width      *int32
	height     *int32
	blur       *int32
	r          *int32
	g          *int32
	b          *int32
	brightness *float32
	saturation *float32
	hue        *int32
	lightness  *int32
	html       *bool
	json       *bool
}

func (r ApiCatGetRequest) Type_(type_ string) ApiCatGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiCatGetRequest) Filter(filter string) ApiCatGetRequest {
	r.filter = &filter
	return r
}

func (r ApiCatGetRequest) Fit(fit string) ApiCatGetRequest {
	r.fit = &fit
	return r
}

func (r ApiCatGetRequest) Position(position string) ApiCatGetRequest {
	r.position = &position
	return r
}

func (r ApiCatGetRequest) Width(width int32) ApiCatGetRequest {
	r.width = &width
	return r
}

func (r ApiCatGetRequest) Height(height int32) ApiCatGetRequest {
	r.height = &height
	return r
}

func (r ApiCatGetRequest) Blur(blur int32) ApiCatGetRequest {
	r.blur = &blur
	return r
}

// Red
func (r ApiCatGetRequest) R(red int32) ApiCatGetRequest {
	r.r = &red
	return r
}

// Green
func (r ApiCatGetRequest) G(g int32) ApiCatGetRequest {
	r.g = &g
	return r
}

// Blue
func (r ApiCatGetRequest) B(b int32) ApiCatGetRequest {
	r.b = &b
	return r
}

// Brightness multiplier
func (r ApiCatGetRequest) Brightness(brightness float32) ApiCatGetRequest {
	r.brightness = &brightness
	return r
}

// Saturation multiplier
func (r ApiCatGetRequest) Saturation(saturation float32) ApiCatGetRequest {
	r.saturation = &saturation
	return r
}

// Hue rotation in degrees
func (r ApiCatGetRequest) Hue(hue int32) ApiCatGetRequest {
	r.hue = &hue
	return r
}

// Lightness addend
func (r ApiCatGetRequest) Lightness(lightness int32) ApiCatGetRequest {
	r.lightness = &lightness
	return r
}

func (r ApiCatGetRequest) Html(html bool) ApiCatGetRequest {
	r.html = &html
	return r
}

func (r ApiCatGetRequest) Json(json bool) ApiCatGetRequest {
	r.json = &json
	return r
}

func (r ApiCatGetRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CatGetExecute(r)
}

/*
CatGet Method for CatGet

Get cat by id

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiCatGetRequest
*/
func (a *CatsAPIService) CatGet(ctx context.Context, id string) ApiCatGetRequest {
	return ApiCatGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *CatsAPIService) CatGetExecute(r ApiCatGetRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatsAPIService.CatGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cat/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.fit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fit", r.fit, "")
	}
	if r.position != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position", r.position, "")
	} else {
		var defaultValue string = "center"
		r.position = &defaultValue
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.blur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blur", r.blur, "")
	}
	if r.r != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "r", r.r, "")
	}
	if r.g != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "g", r.g, "")
	}
	if r.b != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "b", r.b, "")
	}
	if r.brightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brightness", r.brightness, "")
	}
	if r.saturation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturation", r.saturation, "")
	}
	if r.hue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hue", r.hue, "")
	}
	if r.lightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lightness", r.lightness, "")
	}
	if r.html != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "html", r.html, "")
	}
	if r.json != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "json", r.json, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts, a.client.cfg.DefaultHeader["Accept"])
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCatGetTextRequest struct {
	ctx            context.Context
	ApiService     *CatsAPIService
	id             string
	text           string
	font           *string
	fontSize       *int32
	fontColor      *string
	fontBackground *string
	type_          *string
	filter         *string
	fit            *string
	position       *string
	width          *int32
	height         *int32
	blur           *int32
	r              *int32
	g              *int32
	b              *int32
	brightness     *float32
	saturation     *float32
	hue            *int32
	lightness      *int32
	html           *bool
	json           *bool
}

func (r ApiCatGetTextRequest) Font(font string) ApiCatGetTextRequest {
	r.font = &font
	return r
}

func (r ApiCatGetTextRequest) FontSize(fontSize int32) ApiCatGetTextRequest {
	r.fontSize = &fontSize
	return r
}

func (r ApiCatGetTextRequest) FontColor(fontColor string) ApiCatGetTextRequest {
	r.fontColor = &fontColor
	return r
}

func (r ApiCatGetTextRequest) FontBackground(fontBackground string) ApiCatGetTextRequest {
	r.fontBackground = &fontBackground
	return r
}

func (r ApiCatGetTextRequest) Type_(type_ string) ApiCatGetTextRequest {
	r.type_ = &type_
	return r
}

func (r ApiCatGetTextRequest) Filter(filter string) ApiCatGetTextRequest {
	r.filter = &filter
	return r
}

func (r ApiCatGetTextRequest) Fit(fit string) ApiCatGetTextRequest {
	r.fit = &fit
	return r
}

func (r ApiCatGetTextRequest) Position(position string) ApiCatGetTextRequest {
	r.position = &position
	return r
}

func (r ApiCatGetTextRequest) Width(width int32) ApiCatGetTextRequest {
	r.width = &width
	return r
}

func (r ApiCatGetTextRequest) Height(height int32) ApiCatGetTextRequest {
	r.height = &height
	return r
}

func (r ApiCatGetTextRequest) Blur(blur int32) ApiCatGetTextRequest {
	r.blur = &blur
	return r
}

// Red
func (r ApiCatGetTextRequest) R(red int32) ApiCatGetTextRequest {
	r.r = &red
	return r
}

// Green
func (r ApiCatGetTextRequest) G(g int32) ApiCatGetTextRequest {
	r.g = &g
	return r
}

// Blue
func (r ApiCatGetTextRequest) B(b int32) ApiCatGetTextRequest {
	r.b = &b
	return r
}

// Brightness multiplier
func (r ApiCatGetTextRequest) Brightness(brightness float32) ApiCatGetTextRequest {
	r.brightness = &brightness
	return r
}

// Saturation multiplier
func (r ApiCatGetTextRequest) Saturation(saturation float32) ApiCatGetTextRequest {
	r.saturation = &saturation
	return r
}

// Hue rotation in degrees
func (r ApiCatGetTextRequest) Hue(hue int32) ApiCatGetTextRequest {
	r.hue = &hue
	return r
}

// Lightness addend
func (r ApiCatGetTextRequest) Lightness(lightness int32) ApiCatGetTextRequest {
	r.lightness = &lightness
	return r
}

func (r ApiCatGetTextRequest) Html(html bool) ApiCatGetTextRequest {
	r.html = &html
	return r
}

func (r ApiCatGetTextRequest) Json(json bool) ApiCatGetTextRequest {
	r.json = &json
	return r
}

func (r ApiCatGetTextRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CatGetTextExecute(r)
}

/*
CatGetText Method for CatGetText

Get cat by id saying text

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@param text
	@return ApiCatGetTextRequest
*/
func (a *CatsAPIService) CatGetText(ctx context.Context, id string, text string) ApiCatGetTextRequest {
	return ApiCatGetTextRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		text:       text,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *CatsAPIService) CatGetTextExecute(r ApiCatGetTextRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatsAPIService.CatGetText")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cat/{id}/says/{text}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"text"+"}", url.PathEscape(parameterValueToString(r.text, "text")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.font != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "font", r.font, "")
	} else {
		var defaultValue string = "Impact"
		r.font = &defaultValue
	}
	if r.fontSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontSize", r.fontSize, "")
	} else {
		var defaultValue int32 = 30
		r.fontSize = &defaultValue
	}
	if r.fontColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontColor", r.fontColor, "")
	} else {
		var defaultValue string = "#000"
		r.fontColor = &defaultValue
	}
	if r.fontBackground != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontBackground", r.fontBackground, "")
	} else {
		var defaultValue string = "none"
		r.fontBackground = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.fit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fit", r.fit, "")
	}
	if r.position != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position", r.position, "")
	} else {
		var defaultValue string = "center"
		r.position = &defaultValue
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.blur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blur", r.blur, "")
	}
	if r.r != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "r", r.r, "")
	}
	if r.g != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "g", r.g, "")
	}
	if r.b != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "b", r.b, "")
	}
	if r.brightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brightness", r.brightness, "")
	}
	if r.saturation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturation", r.saturation, "")
	}
	if r.hue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hue", r.hue, "")
	}
	if r.lightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lightness", r.lightness, "")
	}
	if r.html != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "html", r.html, "")
	}
	if r.json != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "json", r.json, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts, a.client.cfg.DefaultHeader["Accept"])
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCatRandomRequest struct {
	ctx        context.Context
	ApiService *CatsAPIService
	type_      *string
	filter     *string
	fit        *string
	position   *string
	width      *int32
	height     *int32
	blur       *int32
	r          *int32
	g          *int32
	b          *int32
	brightness *float32
	saturation *float32
	hue        *int32
	lightness  *int32
	html       *bool
	json       *bool
}

func (r ApiCatRandomRequest) Type_(type_ string) ApiCatRandomRequest {
	r.type_ = &type_
	return r
}

func (r ApiCatRandomRequest) Filter(filter string) ApiCatRandomRequest {
	r.filter = &filter
	return r
}

func (r ApiCatRandomRequest) Fit(fit string) ApiCatRandomRequest {
	r.fit = &fit
	return r
}

func (r ApiCatRandomRequest) Position(position string) ApiCatRandomRequest {
	r.position = &position
	return r
}

func (r ApiCatRandomRequest) Width(width int32) ApiCatRandomRequest {
	r.width = &width
	return r
}

func (r ApiCatRandomRequest) Height(height int32) ApiCatRandomRequest {
	r.height = &height
	return r
}

func (r ApiCatRandomRequest) Blur(blur int32) ApiCatRandomRequest {
	r.blur = &blur
	return r
}

// Red
func (r ApiCatRandomRequest) R(red int32) ApiCatRandomRequest {
	r.r = &red
	return r
}

// Green
func (r ApiCatRandomRequest) G(g int32) ApiCatRandomRequest {
	r.g = &g
	return r
}

// Blue
func (r ApiCatRandomRequest) B(b int32) ApiCatRandomRequest {
	r.b = &b
	return r
}

// Brightness multiplier
func (r ApiCatRandomRequest) Brightness(brightness float32) ApiCatRandomRequest {
	r.brightness = &brightness
	return r
}

// Saturation multiplier
func (r ApiCatRandomRequest) Saturation(saturation float32) ApiCatRandomRequest {
	r.saturation = &saturation
	return r
}

// Hue rotation in degrees
func (r ApiCatRandomRequest) Hue(hue int32) ApiCatRandomRequest {
	r.hue = &hue
	return r
}

// Lightness addend
func (r ApiCatRandomRequest) Lightness(lightness int32) ApiCatRandomRequest {
	r.lightness = &lightness
	return r
}

func (r ApiCatRandomRequest) Html(html bool) ApiCatRandomRequest {
	r.html = &html
	return r
}

func (r ApiCatRandomRequest) Json(json bool) ApiCatRandomRequest {
	r.json = &json
	return r
}

func (r ApiCatRandomRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CatRandomExecute(r)
}

/*
CatRandom Method for CatRandom

Get a random cat

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCatRandomRequest
*/
func (a *CatsAPIService) CatRandom(ctx context.Context) ApiCatRandomRequest {
	return ApiCatRandomRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *CatsAPIService) CatRandomExecute(r ApiCatRandomRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatsAPIService.CatRandom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cat"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.fit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fit", r.fit, "")
	}
	if r.position != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position", r.position, "")
	} else {
		var defaultValue string = "center"
		r.position = &defaultValue
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.blur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blur", r.blur, "")
	}
	if r.r != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "r", r.r, "")
	}
	if r.g != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "g", r.g, "")
	}
	if r.b != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "b", r.b, "")
	}
	if r.brightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brightness", r.brightness, "")
	}
	if r.saturation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturation", r.saturation, "")
	}
	if r.hue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hue", r.hue, "")
	}
	if r.lightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lightness", r.lightness, "")
	}
	if r.html != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "html", r.html, "")
	}
	if r.json != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "json", r.json, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts, a.client.cfg.DefaultHeader["Accept"])
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCatRandomTagRequest struct {
	ctx        context.Context
	ApiService *CatsAPIService
	tag        string
	type_      *string
	filter     *string
	fit        *string
	position   *string
	width      *int32
	height     *int32
	blur       *int32
	r          *int32
	g          *int32
	b          *int32
	brightness *float32
	saturation *float32
	hue        *int32
	lightness  *int32
	html       *bool
	json       *bool
}

func (r ApiCatRandomTagRequest) Type_(type_ string) ApiCatRandomTagRequest {
	r.type_ = &type_
	return r
}

func (r ApiCatRandomTagRequest) Filter(filter string) ApiCatRandomTagRequest {
	r.filter = &filter
	return r
}

func (r ApiCatRandomTagRequest) Fit(fit string) ApiCatRandomTagRequest {
	r.fit = &fit
	return r
}

func (r ApiCatRandomTagRequest) Position(position string) ApiCatRandomTagRequest {
	r.position = &position
	return r
}

func (r ApiCatRandomTagRequest) Width(width int32) ApiCatRandomTagRequest {
	r.width = &width
	return r
}

func (r ApiCatRandomTagRequest) Height(height int32) ApiCatRandomTagRequest {
	r.height = &height
	return r
}

func (r ApiCatRandomTagRequest) Blur(blur int32) ApiCatRandomTagRequest {
	r.blur = &blur
	return r
}

// Red
func (r ApiCatRandomTagRequest) R(red int32) ApiCatRandomTagRequest {
	r.r = &red
	return r
}

// Green
func (r ApiCatRandomTagRequest) G(g int32) ApiCatRandomTagRequest {
	r.g = &g
	return r
}

// Blue
func (r ApiCatRandomTagRequest) B(b int32) ApiCatRandomTagRequest {
	r.b = &b
	return r
}

// Brightness multiplier
func (r ApiCatRandomTagRequest) Brightness(brightness float32) ApiCatRandomTagRequest {
	r.brightness = &brightness
	return r
}

// Saturation multiplier
func (r ApiCatRandomTagRequest) Saturation(saturation float32) ApiCatRandomTagRequest {
	r.saturation = &saturation
	return r
}

// Hue rotation in degrees
func (r ApiCatRandomTagRequest) Hue(hue int32) ApiCatRandomTagRequest {
	r.hue = &hue
	return r
}

// Lightness addend
func (r ApiCatRandomTagRequest) Lightness(lightness int32) ApiCatRandomTagRequest {
	r.lightness = &lightness
	return r
}

func (r ApiCatRandomTagRequest) Html(html bool) ApiCatRandomTagRequest {
	r.html = &html
	return r
}

func (r ApiCatRandomTagRequest) Json(json bool) ApiCatRandomTagRequest {
	r.json = &json
	return r
}

func (r ApiCatRandomTagRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CatRandomTagExecute(r)
}

/*
CatRandomTag Method for CatRandomTag

Get random cat by tag

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tag
	@return ApiCatRandomTagRequest
*/
func (a *CatsAPIService) CatRandomTag(ctx context.Context, tag string) ApiCatRandomTagRequest {
	return ApiCatRandomTagRequest{
		ApiService: a,
		ctx:        ctx,
		tag:        tag,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *CatsAPIService) CatRandomTagExecute(r ApiCatRandomTagRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatsAPIService.CatRandomTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cat/{tag}"
	localVarPath = strings.Replace(localVarPath, "{"+"tag"+"}", url.PathEscape(parameterValueToString(r.tag, "tag")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.fit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fit", r.fit, "")
	}
	if r.position != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position", r.position, "")
	} else {
		var defaultValue string = "center"
		r.position = &defaultValue
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.blur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blur", r.blur, "")
	}
	if r.r != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "r", r.r, "")
	}
	if r.g != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "g", r.g, "")
	}
	if r.b != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "b", r.b, "")
	}
	if r.brightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brightness", r.brightness, "")
	}
	if r.saturation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturation", r.saturation, "")
	}
	if r.hue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hue", r.hue, "")
	}
	if r.lightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lightness", r.lightness, "")
	}
	if r.html != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "html", r.html, "")
	}
	if r.json != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "json", r.json, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts, a.client.cfg.DefaultHeader["Accept"])
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCatRandomTagTextRequest struct {
	ctx            context.Context
	ApiService     *CatsAPIService
	tag            string
	text           string
	font           *string
	fontSize       *int32
	fontColor      *string
	fontBackground *string
	type_          *string
	filter         *string
	fit            *string
	position       *string
	width          *int32
	height         *int32
	blur           *int32
	r              *int32
	g              *int32
	b              *int32
	brightness     *float32
	saturation     *float32
	hue            *int32
	lightness      *int32
	html           *bool
	json           *bool
}

func (r ApiCatRandomTagTextRequest) Font(font string) ApiCatRandomTagTextRequest {
	r.font = &font
	return r
}

func (r ApiCatRandomTagTextRequest) FontSize(fontSize int32) ApiCatRandomTagTextRequest {
	r.fontSize = &fontSize
	return r
}

func (r ApiCatRandomTagTextRequest) FontColor(fontColor string) ApiCatRandomTagTextRequest {
	r.fontColor = &fontColor
	return r
}

func (r ApiCatRandomTagTextRequest) FontBackground(fontBackground string) ApiCatRandomTagTextRequest {
	r.fontBackground = &fontBackground
	return r
}

func (r ApiCatRandomTagTextRequest) Type_(type_ string) ApiCatRandomTagTextRequest {
	r.type_ = &type_
	return r
}

func (r ApiCatRandomTagTextRequest) Filter(filter string) ApiCatRandomTagTextRequest {
	r.filter = &filter
	return r
}

func (r ApiCatRandomTagTextRequest) Fit(fit string) ApiCatRandomTagTextRequest {
	r.fit = &fit
	return r
}

func (r ApiCatRandomTagTextRequest) Position(position string) ApiCatRandomTagTextRequest {
	r.position = &position
	return r
}

func (r ApiCatRandomTagTextRequest) Width(width int32) ApiCatRandomTagTextRequest {
	r.width = &width
	return r
}

func (r ApiCatRandomTagTextRequest) Height(height int32) ApiCatRandomTagTextRequest {
	r.height = &height
	return r
}

func (r ApiCatRandomTagTextRequest) Blur(blur int32) ApiCatRandomTagTextRequest {
	r.blur = &blur
	return r
}

// Red
func (r ApiCatRandomTagTextRequest) R(red int32) ApiCatRandomTagTextRequest {
	r.r = &red
	return r
}

// Green
func (r ApiCatRandomTagTextRequest) G(g int32) ApiCatRandomTagTextRequest {
	r.g = &g
	return r
}

// Blue
func (r ApiCatRandomTagTextRequest) B(b int32) ApiCatRandomTagTextRequest {
	r.b = &b
	return r
}

// Brightness multiplier
func (r ApiCatRandomTagTextRequest) Brightness(brightness float32) ApiCatRandomTagTextRequest {
	r.brightness = &brightness
	return r
}

// Saturation multiplier
func (r ApiCatRandomTagTextRequest) Saturation(saturation float32) ApiCatRandomTagTextRequest {
	r.saturation = &saturation
	return r
}

// Hue rotation in degrees
func (r ApiCatRandomTagTextRequest) Hue(hue int32) ApiCatRandomTagTextRequest {
	r.hue = &hue
	return r
}

// Lightness addend
func (r ApiCatRandomTagTextRequest) Lightness(lightness int32) ApiCatRandomTagTextRequest {
	r.lightness = &lightness
	return r
}

func (r ApiCatRandomTagTextRequest) Html(html bool) ApiCatRandomTagTextRequest {
	r.html = &html
	return r
}

func (r ApiCatRandomTagTextRequest) Json(json bool) ApiCatRandomTagTextRequest {
	r.json = &json
	return r
}

func (r ApiCatRandomTagTextRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CatRandomTagTextExecute(r)
}

/*
CatRandomTagText Method for CatRandomTagText

Get random cat by tag saying text

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tag
	@param text
	@return ApiCatRandomTagTextRequest
*/
func (a *CatsAPIService) CatRandomTagText(ctx context.Context, tag string, text string) ApiCatRandomTagTextRequest {
	return ApiCatRandomTagTextRequest{
		ApiService: a,
		ctx:        ctx,
		tag:        tag,
		text:       text,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *CatsAPIService) CatRandomTagTextExecute(r ApiCatRandomTagTextRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatsAPIService.CatRandomTagText")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cat/{tag}/says/{text}"
	localVarPath = strings.Replace(localVarPath, "{"+"tag"+"}", url.PathEscape(parameterValueToString(r.tag, "tag")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"text"+"}", url.PathEscape(parameterValueToString(r.text, "text")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.font != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "font", r.font, "")
	} else {
		var defaultValue string = "Impact"
		r.font = &defaultValue
	}
	if r.fontSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontSize", r.fontSize, "")
	} else {
		var defaultValue int32 = 30
		r.fontSize = &defaultValue
	}
	if r.fontColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontColor", r.fontColor, "")
	} else {
		var defaultValue string = "#000"
		r.fontColor = &defaultValue
	}
	if r.fontBackground != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontBackground", r.fontBackground, "")
	} else {
		var defaultValue string = "none"
		r.fontBackground = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.fit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fit", r.fit, "")
	}
	if r.position != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position", r.position, "")
	} else {
		var defaultValue string = "center"
		r.position = &defaultValue
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.blur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blur", r.blur, "")
	}
	if r.r != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "r", r.r, "")
	}
	if r.g != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "g", r.g, "")
	}
	if r.b != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "b", r.b, "")
	}
	if r.brightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brightness", r.brightness, "")
	}
	if r.saturation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturation", r.saturation, "")
	}
	if r.hue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hue", r.hue, "")
	}
	if r.lightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lightness", r.lightness, "")
	}
	if r.html != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "html", r.html, "")
	}
	if r.json != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "json", r.json, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts, a.client.cfg.DefaultHeader["Accept"])
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCatRandomTextRequest struct {
	ctx            context.Context
	ApiService     *CatsAPIService
	text           string
	font           *string
	fontSize       *int32
	fontColor      *string
	fontBackground *string
	type_          *string
	filter         *string
	fit            *string
	position       *string
	width          *int32
	height         *int32
	blur           *int32
	r              *int32
	g              *int32
	b              *int32
	brightness     *float32
	saturation     *float32
	hue            *int32
	lightness      *int32
	html           *bool
	json           *bool
}

func (r ApiCatRandomTextRequest) Font(font string) ApiCatRandomTextRequest {
	r.font = &font
	return r
}

func (r ApiCatRandomTextRequest) FontSize(fontSize int32) ApiCatRandomTextRequest {
	r.fontSize = &fontSize
	return r
}

func (r ApiCatRandomTextRequest) FontColor(fontColor string) ApiCatRandomTextRequest {
	r.fontColor = &fontColor
	return r
}

func (r ApiCatRandomTextRequest) FontBackground(fontBackground string) ApiCatRandomTextRequest {
	r.fontBackground = &fontBackground
	return r
}

func (r ApiCatRandomTextRequest) Type_(type_ string) ApiCatRandomTextRequest {
	r.type_ = &type_
	return r
}

func (r ApiCatRandomTextRequest) Filter(filter string) ApiCatRandomTextRequest {
	r.filter = &filter
	return r
}

func (r ApiCatRandomTextRequest) Fit(fit string) ApiCatRandomTextRequest {
	r.fit = &fit
	return r
}

func (r ApiCatRandomTextRequest) Position(position string) ApiCatRandomTextRequest {
	r.position = &position
	return r
}

func (r ApiCatRandomTextRequest) Width(width int32) ApiCatRandomTextRequest {
	r.width = &width
	return r
}

func (r ApiCatRandomTextRequest) Height(height int32) ApiCatRandomTextRequest {
	r.height = &height
	return r
}

func (r ApiCatRandomTextRequest) Blur(blur int32) ApiCatRandomTextRequest {
	r.blur = &blur
	return r
}

// Red
func (r ApiCatRandomTextRequest) R(red int32) ApiCatRandomTextRequest {
	r.r = &red
	return r
}

// Green
func (r ApiCatRandomTextRequest) G(g int32) ApiCatRandomTextRequest {
	r.g = &g
	return r
}

// Blue
func (r ApiCatRandomTextRequest) B(b int32) ApiCatRandomTextRequest {
	r.b = &b
	return r
}

// Brightness multiplier
func (r ApiCatRandomTextRequest) Brightness(brightness float32) ApiCatRandomTextRequest {
	r.brightness = &brightness
	return r
}

// Saturation multiplier
func (r ApiCatRandomTextRequest) Saturation(saturation float32) ApiCatRandomTextRequest {
	r.saturation = &saturation
	return r
}

// Hue rotation in degrees
func (r ApiCatRandomTextRequest) Hue(hue int32) ApiCatRandomTextRequest {
	r.hue = &hue
	return r
}

// Lightness addend
func (r ApiCatRandomTextRequest) Lightness(lightness int32) ApiCatRandomTextRequest {
	r.lightness = &lightness
	return r
}

func (r ApiCatRandomTextRequest) Html(html bool) ApiCatRandomTextRequest {
	r.html = &html
	return r
}

func (r ApiCatRandomTextRequest) Json(json bool) ApiCatRandomTextRequest {
	r.json = &json
	return r
}

func (r ApiCatRandomTextRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.CatRandomTextExecute(r)
}

/*
CatRandomText Method for CatRandomText

Get random cat saying text

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param text
	@return ApiCatRandomTextRequest
*/
func (a *CatsAPIService) CatRandomText(ctx context.Context, text string) ApiCatRandomTextRequest {
	return ApiCatRandomTextRequest{
		ApiService: a,
		ctx:        ctx,
		text:       text,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *CatsAPIService) CatRandomTextExecute(r ApiCatRandomTextRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CatsAPIService.CatRandomText")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cat/says/{text}"
	localVarPath = strings.Replace(localVarPath, "{"+"text"+"}", url.PathEscape(parameterValueToString(r.text, "text")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.font != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "font", r.font, "")
	} else {
		var defaultValue string = "Impact"
		r.font = &defaultValue
	}
	if r.fontSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontSize", r.fontSize, "")
	} else {
		var defaultValue int32 = 30
		r.fontSize = &defaultValue
	}
	if r.fontColor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontColor", r.fontColor, "")
	} else {
		var defaultValue string = "#000"
		r.fontColor = &defaultValue
	}
	if r.fontBackground != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fontBackground", r.fontBackground, "")
	} else {
		var defaultValue string = "none"
		r.fontBackground = &defaultValue
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	if r.filter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter", r.filter, "")
	}
	if r.fit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fit", r.fit, "")
	}
	if r.position != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position", r.position, "")
	} else {
		var defaultValue string = "center"
		r.position = &defaultValue
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "height", r.height, "")
	}
	if r.blur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "blur", r.blur, "")
	}
	if r.r != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "r", r.r, "")
	}
	if r.g != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "g", r.g, "")
	}
	if r.b != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "b", r.b, "")
	}
	if r.brightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "brightness", r.brightness, "")
	}
	if r.saturation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "saturation", r.saturation, "")
	}
	if r.hue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "hue", r.hue, "")
	}
	if r.lightness != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lightness", r.lightness, "")
	}
	if r.html != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "html", r.html, "")
	}
	if r.json != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "json", r.json, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts, a.client.cfg.DefaultHeader["Accept"])
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
