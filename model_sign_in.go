/*
Cat as a service (CATAAS)

Cat as a service (CATAAS) is a REST API to spread peace and love (or not) thanks to cats.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SignIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignIn{}

// SignIn struct for SignIn
type SignIn struct {
	Username *string `json:"username,omitempty"`
	Password string `json:"password"`
	AdditionalProperties map[string]interface{}
}

type _SignIn SignIn

// NewSignIn instantiates a new SignIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignIn(password string) *SignIn {
	this := SignIn{}
	this.Password = password
	return &this
}

// NewSignInWithDefaults instantiates a new SignIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignInWithDefaults() *SignIn {
	this := SignIn{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SignIn) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignIn) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SignIn) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SignIn) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value
func (o *SignIn) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SignIn) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SignIn) SetPassword(v string) {
	o.Password = v
}

func (o SignIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	toSerialize["password"] = o.Password

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SignIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignIn := _SignIn{}

	err = json.Unmarshal(data, &varSignIn)

	if err != nil {
		return err
	}

	*o = SignIn(varSignIn)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSignIn struct {
	value *SignIn
	isSet bool
}

func (v NullableSignIn) Get() *SignIn {
	return v.value
}

func (v *NullableSignIn) Set(val *SignIn) {
	v.value = val
	v.isSet = true
}

func (v NullableSignIn) IsSet() bool {
	return v.isSet
}

func (v *NullableSignIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignIn(val *SignIn) *NullableSignIn {
	return &NullableSignIn{value: val, isSet: true}
}

func (v NullableSignIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


